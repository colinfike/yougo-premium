// Code generated by MockGen. DO NOT EDIT.
// Source: internal/youtube/client.go

// Package youtube is a generated GoMock package.
package youtube

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockclient is a mock of client interface
type Mockclient struct {
	ctrl     *gomock.Controller
	recorder *MockclientMockRecorder
}

// MockclientMockRecorder is the mock recorder for Mockclient
type MockclientMockRecorder struct {
	mock *Mockclient
}

// NewMockclient creates a new mock instance
func NewMockclient(ctrl *gomock.Controller) *Mockclient {
	mock := &Mockclient{ctrl: ctrl}
	mock.recorder = &MockclientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockclient) EXPECT() *MockclientMockRecorder {
	return m.recorder
}

// listChannels mocks base method
func (m *Mockclient) listChannels(arg0 string) (ChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listChannels", arg0)
	ret0, _ := ret[0].(ChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listChannels indicates an expected call of listChannels
func (mr *MockclientMockRecorder) listChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listChannels", reflect.TypeOf((*Mockclient)(nil).listChannels), arg0)
}

// listVideos mocks base method
func (m *Mockclient) listVideos(arg0 string) (ChannelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listVideos", arg0)
	ret0, _ := ret[0].(ChannelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listVideos indicates an expected call of listVideos
func (mr *MockclientMockRecorder) listVideos(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listVideos", reflect.TypeOf((*Mockclient)(nil).listVideos), arg0)
}

// searchVideos mocks base method
func (m *Mockclient) searchVideos(arg0, arg1 string, arg2 int64) ([]VideoInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "searchVideos", arg0, arg1, arg2)
	ret0, _ := ret[0].([]VideoInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// searchVideos indicates an expected call of searchVideos
func (mr *MockclientMockRecorder) searchVideos(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "searchVideos", reflect.TypeOf((*Mockclient)(nil).searchVideos), arg0, arg1, arg2)
}
